generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String      @id @default(uuid())
  email            String      @unique
  password         String
  firstName        String
  lastName         String
  role             UserRole
  phone            String?
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  documents        Document[]
  notes            Note[]
  schedules        Schedule[]
  cancelledOrders  WorkOrder[] @relation("CancelledBy")
  createdOrders    WorkOrder[] @relation("CreatedBy")
  supervisedOrders WorkOrder[] @relation("SupervisedBy")
}

model WorkOrder {
  id                 String          @id @default(uuid())
  type               WorkOrderType
  status             WorkOrderStatus @default(PENDING)
  fameNumber         String          @unique
  clientName         String
  clientContactName  String?
  clientPhone        String?
  startDate          DateTime
  startHour          String
  endHour           String?
  location          String
  noteText          String?
  documentUrl       String?
  truckNumber       String?
  technician        String?
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  cancelledAt        DateTime?
  createdById        String
  cancelledById      String?
  supervisorId       String?
  createdBy          User            @relation("CreatedBy", fields: [createdById], references: [id])
  cancelledBy        User?           @relation("CancelledBy", fields: [cancelledById], references: [id])
  supervisor         User?           @relation("SupervisedBy", fields: [supervisorId], references: [id])
  equipment          Equipment[]     @relation("EquipmentToWorkOrder")
  documents          Document[]
  notes              Note[]
  schedules          Schedule[]
}

model Equipment {
  id          String       @id @default(uuid())
  name        String
  type        EquipmentType
  status      EquipmentStatus @default(AVAILABLE)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  workOrders  WorkOrder[]  @relation("EquipmentToWorkOrder")
}

model Schedule {
  id          String    @id @default(uuid())
  startTime   String
  endTime     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String
  workOrderId String
  user        User      @relation(fields: [userId], references: [id])
  workOrder   WorkOrder @relation(fields: [workOrderId], references: [id])
}

model Note {
  id          String     @id @default(uuid())
  content     String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  userId      String
  workOrderId String?
  user        User       @relation(fields: [userId], references: [id])
  workOrder   WorkOrder? @relation(fields: [workOrderId], references: [id])
}

model Document {
  id          String     @id @default(uuid())
  name        String
  url         String
  type        String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  userId      String
  workOrderId String?
  user        User       @relation(fields: [userId], references: [id])
  workOrder   WorkOrder? @relation(fields: [workOrderId], references: [id])
}

enum UserRole {
  ADMIN
  SUPERVISOR
  TECHNICIAN
}

enum WorkOrderType {
  PICKUP
  DELIVERY
  TEARDOWN
  SETUP
  ACTIVATION
}

enum WorkOrderStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum EquipmentType {
  TRUCK
  TRAILER
  SIGN
  LIGHT
  BARRIER
  OTHER
}

enum EquipmentStatus {
  AVAILABLE
  IN_USE
  MAINTENANCE
  RETIRED
}
