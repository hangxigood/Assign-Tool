generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String      @id @default(uuid())
  email            String      @unique
  password         String
  firstName        String
  lastName         String
  role             UserRole
  phone            String?
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  documents        Document[]
  notes            Note[]
  schedules        Schedule[]
  assignedOrders   WorkOrder[] @relation("AssignedTo")
  cancelledOrders  WorkOrder[] @relation("CancelledBy")
  createdOrders    WorkOrder[] @relation("CreatedBy")
  supervisedOrders WorkOrder[] @relation("SupervisedBy")
}

model WorkOrder {
  id                 String          @id @default(uuid())
  type               WorkOrderType
  status             WorkOrderStatus @default(PENDING)
  fameNumber         String          @unique
  clientName         String
  clientPhone        String
  clientEmail        String?
  startDate          DateTime
  endDate            DateTime?
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  cancelledAt        DateTime?
  pickupLocationId   String?
  deliveryLocationId String?
  assignedToId       String
  createdById        String
  cancelledById      String?
  supervisorId       String
  documents          Document[]
  notes              Note[]
  schedules          Schedule[]
  assignedTo         User            @relation("AssignedTo", fields: [assignedToId], references: [id])
  cancelledBy        User?           @relation("CancelledBy", fields: [cancelledById], references: [id])
  createdBy          User            @relation("CreatedBy", fields: [createdById], references: [id])
  deliveryLocation   Location?       @relation("DeliveryLocation", fields: [deliveryLocationId], references: [id])
  pickupLocation     Location?       @relation("PickupLocation", fields: [pickupLocationId], references: [id])
  supervisor         User            @relation("SupervisedBy", fields: [supervisorId], references: [id])
  equipment          Equipment[]     @relation("EquipmentToWorkOrder")
}

model Equipment {
  id              String          @id @default(uuid())
  name            String
  type            String
  status          EquipmentStatus
  licensePlate    String?
  serialNumber    String?
  description     String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  locationId      String?
  documents       Document[]
  currentLocation Location?       @relation(fields: [locationId], references: [id])
  notes           Note[]
  workOrders      WorkOrder[]     @relation("EquipmentToWorkOrder")
}

model Location {
  id             String      @id @default(uuid())
  name           String
  address        String
  city           String
  state          String
  zipCode        String
  latitude       Float?
  longitude      Float?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  equipment      Equipment[]
  notes          Note[]      @relation("LocationNotes")
  deliveryOrders WorkOrder[] @relation("DeliveryLocation")
  pickupOrders   WorkOrder[] @relation("PickupLocation")
}

model Schedule {
  id          String    @id @default(uuid())
  startTime   DateTime
  endTime     DateTime
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String
  workOrderId String
  user        User      @relation(fields: [userId], references: [id])
  workOrder   WorkOrder @relation(fields: [workOrderId], references: [id])
}

model Note {
  id          String     @id @default(uuid())
  content     String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  userId      String
  workOrderId String?
  equipmentId String?
  locationId  String?
  equipment   Equipment? @relation(fields: [equipmentId], references: [id])
  location    Location?  @relation("LocationNotes", fields: [locationId], references: [id])
  user        User       @relation(fields: [userId], references: [id])
  workOrder   WorkOrder? @relation(fields: [workOrderId], references: [id])
}

model Document {
  id          String     @id @default(uuid())
  name        String
  type        String
  url         String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  userId      String
  workOrderId String?
  equipmentId String?
  equipment   Equipment? @relation(fields: [equipmentId], references: [id])
  user        User       @relation(fields: [userId], references: [id])
  workOrder   WorkOrder? @relation(fields: [workOrderId], references: [id])
}

enum UserRole {
  ADMIN
  COORDINATOR
  SUPERVISOR
  TECHNICIAN
}

enum WorkOrderType {
  PICKUP
  SETUP
  DELIVERY
  ACTIVATION
  TEARDOWN
}

enum WorkOrderStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum EquipmentStatus {
  AVAILABLE
  IN_USE
  MAINTENANCE
  OUT_OF_SERVICE
}
